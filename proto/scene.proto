package pentatope;
import "physics_base.proto";


// Scene contains objects and lights.
// Objects can be emissive, but they are not as fast as lights.
message RenderScene {
    repeated SceneObject objects = 1;
    repeated SceneLight lights = 2;

    // Uniform, background radiance. Assumed 0 if omitted.
    optional SpectrumProto background_radiance = 3;

    // Global uniform scattering. Vacuum is assumed if omitted.
    optional UniformScattering uniform_scattering = 4;
}

message UniformScattering {
	// Distance such that a photon traveling this
	// is scattered with 1/e probability.
	// Must be positive.
	required float sigma = 1;
}

message SceneObject {
    optional ObjectGeometry geometry = 1;
    optional ObjectMaterial material = 2;
}

// ObjectGeometry uses extensions to emulate polymorphism.
message ObjectGeometry {
    enum GeometryType {
        OBB = 1;
        TETRAHEDRON = 2;
        SPHERE = 3;
        DISC = 4;
    }
    extensions 100 to max;

    required GeometryType type = 1;
}

message OBBGeometry {
    extend ObjectGeometry {
        optional OBBGeometry geom = 100;
    }
    // Placement of AABB in the world coodinates.
    optional RigidTransform local_to_world = 1;

    // 4-element for size of each axis in local coodinates.
    repeated float size = 3 [packed=true];
}

message TetrahedronGeometry {
    extend ObjectGeometry {
        optional TetrahedronGeometry geom = 101;
    }
    required Point vertex0 = 1;
    required Point vertex1 = 2;
    required Point vertex2 = 3;
    required Point vertex3 = 4;
}

message SphereGeometry {
    extend ObjectGeometry {
        optional SphereGeometry geom = 102;
    }
    required Point center = 1;
    required float radius = 2;
}

message DiscGeometry {
    extend ObjectGeometry {
        optional DiscGeometry geom = 103;
    }
    required Point center = 1;
    required Direction normal = 2;
    required float radius = 3;
}


message ObjectMaterial {
    // Model after (pseudo) real-life objects, because we don't have
    // established BRDF models for 4-d space.
    // Also, ObjectMaterial describes the whole volume of an object,
    // in addition to its surface.
    //
    // DO:
    // * add new materials for completely new kind of objects
    // DONT:
    // * implement generic algebraic shader
    // * create layered material system
    // * do textures (fog density field is maybe ok, but surface texture is huge no-no)
    enum MaterialType {
        UNIFORM_LAMBERT = 1;
        GLASS = 2;  // no dispersion, transparent.
        WATER = 3;  // no dispersion, volumetric tint.
    }
    extensions 100 to max;

    required MaterialType type = 1;
}

message UniformLambertMaterialProto {
    extend ObjectMaterial {
        optional UniformLambertMaterialProto material = 100;
    }

    // Reflectance in [0, 1].
    optional SpectrumProto reflectance = 1;
}

message GlassMaterialProto {
    extend ObjectMaterial {
        optional GlassMaterialProto material = 101;
    }

    // Refractive index of the inside.
    // index > 1 means more solid than air.
    // This should be considered as absolute index,
    // but the tracer currently do not support nested material
    // so it doesn't matter.
    optional float refractive_index = 1;
}


message SceneLight {
    enum LightType {
        POINT = 1;
    }
    extensions 100 to max;

    required LightType type = 1;
}

message PointLightProto {
    extend SceneLight {
        optional PointLightProto light = 100;
    }
    // Location of the point light.
    repeated float translation = 1 [packed=true];

    // Total power of the point light.
    optional SpectrumProto power = 2;
}
