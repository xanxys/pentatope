// Append "Proto" if a message collides with a class.
// Do use different name if the responsibility is slightly different
// between a message vs. a class, but don't be too clever to
// avoid collision.
package pentatope;
import "physics_base.proto";
import "scene.proto";

// A description of rendering a movie with static scene.
// This assumes fixed frame-rate, 2d RGB image stream.
// (currently no stereoscopy or volumetric data)
//
// Renderer need not assume temporal coherency because
// exploiting it is PITA, and optimizing UI and distributed computation
// is much better in practice, especially considering pentatope
// is not coupled with any physics simulator.
message RenderMovieTask {
    // Framerate of the movie. Typically 30 or 60.
    optional float framerate = 1;

    // Size of the movie.
    required uint32 width = 2;
    required uint32 height = 3;

    // All frames. sizes must match the width and height,
    // but other parameters (such as FoV) can vary frame-to-frame.
    repeated CameraConfig frames = 4;

    // The static scene shared by all frames.
    required RenderScene scene = 5;

    optional uint32 sample_per_pixel = 6;
}

// A description of rendering a single frame.
// Contains scene description, camera, output image, etc.
// It's not expected to distribute one RenderTask to
// multiple nodes.
message RenderTask {
    // Average number of samples / px.
    // Note that actual # of samples can vary depending
    // on sampling scheme.
    optional uint32 sample_per_pixel = 2;

    // A camera (and output image) to use for this render.
    optional CameraConfig camera = 3;

    // All objects and lights, including materials.
    optional RenderScene scene = 5;

    // Deprecated fields.
    optional string deprecated_scene_name = 1;
    optional string deprecated_output_path = 4;
}

// A camera type, pose, blur, tonemap, output image format, etc.
// Although CameraConfig specified output format,
// it's treated as opaque blob; IO should be specified by RenderTask.
message CameraConfig {
    // "perspective2": 2-d sliced perspective point camera.
    optional string camera_type = 1;

    // transform to determine camera pose in the world coordinate.
    optional RigidTransform local_to_world = 5;

    // what's normally called width.
    // must be > 0.
    optional uint32 size_x = 2;

    // what's normally called height.
    // must be > 0.
    optional uint32 size_y = 3;

    // field of view in degree
    // only applicable to perspective camera_type
    optional float fov_x = 6;
    optional float fov_y = 7;
}
