// Append "Proto" if a message collides with a class.
// Do use different name if the responsibility is slightly different
// between a message vs. a class, but don't be too clever to
// avoid collision.
package pentatope;

// A description of rendering a single frame.
// Contains scene description, camera, output image, etc.
// It's not expected to distribute one RenderTask to
// multiple nodes.
message RenderTask {
    // "cornell": hardcoded Cornell box-like scene.
    // (Bunch of spheres in a tesseract)
    optional string scene_name = 1;

    // Average number of samples / px.
    // Note that actual # of samples can vary depending
    // on sampling scheme.
    optional uint32 sample_per_pixel = 2;

    // A camera (and output image) to use for this render.
    optional CameraConfig camera = 3;

    // Output file path. Should be full path.
    optional string output_path = 4;

    // All objects and lights, including materials.
    optional RenderScene scene = 5;
}

// A camera type, pose, blur, tonemap, output image format, etc.
// Although CameraConfig specified output format,
// it's treated as opaque blob; IO should be specified by RenderTask.
message CameraConfig {
    // "perspective2": 2-d sliced perspective point camera.
    optional string camera_type = 1;

    // transform to determine camera pose in the world coordinate.
    optional RigidTransform local_to_world = 5;

    // what's normally called width.
    // must be > 0.
    optional uint32 size_x = 2;

    // what's normally called height.
    // must be > 0.
    optional uint32 size_y = 3;

    // field of view in degree
    // only applicable to perspective camera_type
    optional float fov_x = 6;
    optional float fov_y = 7;
}

// 4-d rigid transform (= SE(4))
// transform(x) = rotation * x + translation
message RigidTransform {
    // row-major 4x4 rotation matrix.
    // must have 16 elements, and the matrix
    // is a proper rotation matrix (det==1).
    // 0 1 2 3
    // ...
    // ...  15
    repeated float rotation = 1 [packed=true];

    // 4-element translation vector.
    repeated float translation = 2 [packed=true];
}

message SpectrumProto {
    // Color values in RGB space.
    // not well-defined.
    optional float r = 1;
    optional float g = 2;
    optional float b = 3;
}

// Scene contains objects and lights.
// Objects can be emissive, but they are not as fast as lights.
message RenderScene {
    repeated SceneObject objects = 1;
    repeated SceneLight lights = 2;
}

message SceneObject {
    optional ObjectGeometry geometry = 1;
    optional ObjectMaterial material = 2;
}

// ObjectGeometry uses extensions to emulate polymorphism.
message ObjectGeometry {
    enum GeometryType {
        OBB = 1;
    }
    extensions 100 to max;

    required GeometryType type = 1;
}

message OBBGeometry {
    extend ObjectGeometry {
        optional OBBGeometry geom = 100;
    }
    // Placement of AABB in the world coodinates.
    optional RigidTransform local_to_world = 1;

    // 4-element for size of each axis in local coodinates.
    repeated float size = 3 [packed=true];
}


message ObjectMaterial {
}


message SceneLight {
    enum LightType {
        POINT = 1;
    }
    extensions 100 to max;

    required LightType type = 1;
}

message PointLightProto {
    extend SceneLight {
        optional PointLightProto light = 100;
    }
    // Location of the point light.
    repeated float translation = 1 [packed=true];

    // Total power of the point light.
    optional SpectrumProto power = 2;
}
